
TccSistemasEmbarcados.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  0000090a  0000099e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014e  0080017c  0080017c  00000a1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c7  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000203  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ba  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a54  00000000  00000000  00001f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000029c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	37 c1       	rjmp	.+622    	; 0x294 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	74 c0       	rjmp	.+232    	; 0x114 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e0       	ldi	r30, 0x0A	; 10
  48:	f9 e0       	ldi	r31, 0x09	; 9
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 37       	cpi	r26, 0x7C	; 124
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	22 e0       	ldi	r18, 0x02	; 2
  58:	ac e7       	ldi	r26, 0x7C	; 124
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 3c       	cpi	r26, 0xCA	; 202
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	c9 d1       	rcall	.+914    	; 0x3fa <main>
  68:	4e c4       	rjmp	.+2204   	; 0x906 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <calculateConsumption>:
		byte9 = byte10;
		byte10 = USARTReadChar();
	}

	return byte8;
}
  6c:	cf 92       	push	r12
  6e:	df 92       	push	r13
  70:	ef 92       	push	r14
  72:	ff 92       	push	r15
  74:	0f 93       	push	r16
  76:	1f 93       	push	r17
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29

double calculateConsumption(void) {
  7c:	ca e8       	ldi	r28, 0x8A	; 138
  7e:	d1 e0       	ldi	r29, 0x01	; 1
  80:	0a ec       	ldi	r16, 0xCA	; 202
  82:	12 e0       	ldi	r17, 0x02	; 2
	
	double calculatedConsumption = 0;
  84:	c1 2c       	mov	r12, r1
  86:	d1 2c       	mov	r13, r1
  88:	76 01       	movw	r14, r12
	double instantConsumption = 0;
	
	uint8_t i;	
	for(i = 0; i < 80; i++) {
		
		instantConsumption = instantADCVoltage[i] - 2.5f;
  8a:	69 91       	ld	r22, Y+
  8c:	79 91       	ld	r23, Y+
  8e:	89 91       	ld	r24, Y+
  90:	99 91       	ld	r25, Y+
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	40 e2       	ldi	r20, 0x20	; 32
  98:	50 e4       	ldi	r21, 0x40	; 64
  9a:	f4 d1       	rcall	.+1000   	; 0x484 <__subsf3>
		instantConsumption *= 10000;
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e4       	ldi	r19, 0x40	; 64
  a0:	4c e1       	ldi	r20, 0x1C	; 28
  a2:	56 e4       	ldi	r21, 0x46	; 70
  a4:	76 d3       	rcall	.+1772   	; 0x792 <__mulsf3>
		
		calculatedConsumption += pow(instantConsumption, 2);
  a6:	9b 01       	movw	r18, r22
  a8:	ac 01       	movw	r20, r24
  aa:	73 d3       	rcall	.+1766   	; 0x792 <__mulsf3>
  ac:	9b 01       	movw	r18, r22
  ae:	ac 01       	movw	r20, r24
  b0:	c7 01       	movw	r24, r14
  b2:	b6 01       	movw	r22, r12
  b4:	e8 d1       	rcall	.+976    	; 0x486 <__addsf3>
  b6:	6b 01       	movw	r12, r22
  b8:	7c 01       	movw	r14, r24
	
	double calculatedConsumption = 0;
	double instantConsumption = 0;
	
	uint8_t i;	
	for(i = 0; i < 80; i++) {
  ba:	c0 17       	cp	r28, r16
  bc:	d1 07       	cpc	r29, r17
  be:	29 f7       	brne	.-54     	; 0x8a <calculateConsumption+0x1e>
		instantConsumption *= 10000;
		
		calculatedConsumption += pow(instantConsumption, 2);
	}
	
	calculatedConsumption /= 80;
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	40 ea       	ldi	r20, 0xA0	; 160
  c6:	52 e4       	ldi	r21, 0x42	; 66
  c8:	42 d2       	rcall	.+1156   	; 0x54e <__divsf3>
	
	return sqrt(calculatedConsumption);
  ca:	ca d3       	rcall	.+1940   	; 0x860 <sqrt>
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	ff 90       	pop	r15
  d6:	ef 90       	pop	r14
  d8:	df 90       	pop	r13
  da:	cf 90       	pop	r12
  dc:	08 95       	ret

000000de <ADCInit>:

void ADCInit(void) {
	
	// Seleciona o canal 0 do ADC, com saída ajustada à direita e tensão de referência definida pelo pino AREF
	ADMUX |= (1 << REFS0);
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
	
	// Seta o prescaler para 128
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	87 60       	ori	r24, 0x07	; 7
  f0:	80 83       	st	Z, r24
	
	// Desabilita a função digital do pino PC0
	DIDR0 |= (1 << ADC0D);
  f2:	ae e7       	ldi	r26, 0x7E	; 126
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	8c 91       	ld	r24, X
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	8c 93       	st	X, r24
	
	// Habilita a interrupção do ADC
	ADCSRA = (1 << ADIE);
  fc:	88 e0       	ldi	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	
	// Habilita o ADC
	ADCSRA |= (1 << ADEN);
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <ADCStartConversion>:
}

void ADCStartConversion(void) {
	
	// Inicia a conversão
	ADCSRA |= (1 << ADSC);
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <__vector_21>:
		USARTWriteChar(consumptionH);
		USARTWriteChar(consumptionL);
	}
}

ISR(ADC_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	1f 93       	push	r17
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	
	if(++adcInterruptCounter >= 72) {
 13c:	80 91 86 01 	lds	r24, 0x0186
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 86 01 	sts	0x0186, r24
 146:	88 34       	cpi	r24, 0x48	; 72
 148:	20 f1       	brcs	.+72     	; 0x192 <__vector_21+0x7e>
		
		instantADCVoltage[instantADCVoltageIndex] = (ADCW * 0.0048828125f);
 14a:	10 91 87 01 	lds	r17, 0x0187
 14e:	60 91 78 00 	lds	r22, 0x0078
 152:	70 91 79 00 	lds	r23, 0x0079
 156:	c1 2f       	mov	r28, r17
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	cc 0f       	add	r28, r28
 15c:	dd 1f       	adc	r29, r29
 15e:	cc 0f       	add	r28, r28
 160:	dd 1f       	adc	r29, r29
 162:	c6 57       	subi	r28, 0x76	; 118
 164:	de 4f       	sbci	r29, 0xFE	; 254
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	85 d2       	rcall	.+1290   	; 0x676 <__floatunsisf>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 ea       	ldi	r20, 0xA0	; 160
 172:	5b e3       	ldi	r21, 0x3B	; 59
 174:	0e d3       	rcall	.+1564   	; 0x792 <__mulsf3>
 176:	68 83       	st	Y, r22
 178:	79 83       	std	Y+1, r23	; 0x01
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	9b 83       	std	Y+3, r25	; 0x03
		
		if(instantADCVoltageIndex++ >= 80)
 17e:	10 35       	cpi	r17, 0x50	; 80
 180:	20 f4       	brcc	.+8      	; 0x18a <__vector_21+0x76>
 182:	1f 5f       	subi	r17, 0xFF	; 255
 184:	10 93 87 01 	sts	0x0187, r17
 188:	02 c0       	rjmp	.+4      	; 0x18e <__vector_21+0x7a>
			instantADCVoltageIndex = 0;
 18a:	10 92 87 01 	sts	0x0187, r1
			
		adcInterruptCounter = 0;
 18e:	10 92 86 01 	sts	0x0186, r1
	}
	
	ADCStartConversion();
 192:	ba df       	rcall	.-140    	; 0x108 <ADCStartConversion>
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	bf 91       	pop	r27
 19e:	af 91       	pop	r26
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	7f 91       	pop	r23
 1a6:	6f 91       	pop	r22
 1a8:	5f 91       	pop	r21
 1aa:	4f 91       	pop	r20
 1ac:	3f 91       	pop	r19
 1ae:	2f 91       	pop	r18
 1b0:	1f 91       	pop	r17
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <USARTInit>:
}

void USARTInit(uint16_t ubrr_value) {

	// Configura o baud rate
	UBRR0L = ubrr_value;
 1bc:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (ubrr_value >> 8);
 1c0:	90 93 c5 00 	sts	0x00C5, r25
	
	// Configura o formato do frame (assíncrono, sem paridade, 1 stop bit e comprimento de 8 bits)
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 1c4:	e2 ec       	ldi	r30, 0xC2	; 194
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	86 60       	ori	r24, 0x06	; 6
 1cc:	80 83       	st	Z, r24
	
	// Habilita o transmissor, o receptor e as interrupções de serial
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 1ce:	e1 ec       	ldi	r30, 0xC1	; 193
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 69       	ori	r24, 0x98	; 152
 1d6:	80 83       	st	Z, r24
 1d8:	08 95       	ret

000001da <USARTReadChar>:
}

uint8_t USARTReadChar(void) {
	
	// Aguarda a chegada de novos dados
	while(!(UCSR0A & (1 << RXC0)));
 1da:	e0 ec       	ldi	r30, 0xC0	; 192
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	ec f7       	brge	.-6      	; 0x1de <USARTReadChar+0x4>
	
	// Retorna o dado recebido
	return UDR0;
 1e4:	80 91 c6 00 	lds	r24, 0x00C6
}
 1e8:	08 95       	ret

000001ea <waitForModuleResponseReady>:
	}
	
	ADCStartConversion();
}

void waitForModuleResponseReady(void) {
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
	uint8_t byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0, byte5 = 0, byte6 = 0, byte7 = 0;
 1f6:	f1 2c       	mov	r15, r1
 1f8:	00 e0       	ldi	r16, 0x00	; 0
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	e1 2c       	mov	r14, r1
 202:	06 c0       	rjmp	.+12     	; 0x210 <waitForModuleResponseReady+0x26>
 204:	ec 2e       	mov	r14, r28
 206:	cd 2f       	mov	r28, r29
 208:	d1 2f       	mov	r29, r17
 20a:	10 2f       	mov	r17, r16
 20c:	0f 2d       	mov	r16, r15
	}
	
	ADCStartConversion();
}

void waitForModuleResponseReady(void) {
 20e:	f8 2e       	mov	r15, r24
		byte2 = byte3;
		byte3 = byte4;
		byte4 = byte5;
		byte5 = byte6;
		byte6 = byte7;
		byte7 = USARTReadChar();
 210:	e4 df       	rcall	.-56     	; 0x1da <USARTReadChar>
}

void waitForModuleResponseReady(void) {
	uint8_t byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0, byte5 = 0, byte6 = 0, byte7 = 0;
	
	while(byte1 != 'r' || byte2 != 'e' || byte3 != 'a' || byte4 != 'd' || byte5 != 'y' || byte6 != 13 || byte7 != 10) {
 212:	92 e7       	ldi	r25, 0x72	; 114
 214:	e9 12       	cpse	r14, r25
 216:	f6 cf       	rjmp	.-20     	; 0x204 <waitForModuleResponseReady+0x1a>
 218:	c5 36       	cpi	r28, 0x65	; 101
 21a:	a1 f7       	brne	.-24     	; 0x204 <waitForModuleResponseReady+0x1a>
 21c:	d1 36       	cpi	r29, 0x61	; 97
 21e:	91 f7       	brne	.-28     	; 0x204 <waitForModuleResponseReady+0x1a>
 220:	14 36       	cpi	r17, 0x64	; 100
 222:	81 f7       	brne	.-32     	; 0x204 <waitForModuleResponseReady+0x1a>
 224:	09 37       	cpi	r16, 0x79	; 121
 226:	71 f7       	brne	.-36     	; 0x204 <waitForModuleResponseReady+0x1a>
 228:	9d e0       	ldi	r25, 0x0D	; 13
 22a:	f9 12       	cpse	r15, r25
 22c:	eb cf       	rjmp	.-42     	; 0x204 <waitForModuleResponseReady+0x1a>
 22e:	8a 30       	cpi	r24, 0x0A	; 10
 230:	49 f7       	brne	.-46     	; 0x204 <waitForModuleResponseReady+0x1a>
		byte4 = byte5;
		byte5 = byte6;
		byte6 = byte7;
		byte7 = USARTReadChar();
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	08 95       	ret

00000240 <waitForModuleResponseOk>:

void waitForModuleResponseOk(void) {
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	uint8_t byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0;
 246:	d0 e0       	ldi	r29, 0x00	; 0
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	10 e0       	ldi	r17, 0x00	; 0
 24c:	03 c0       	rjmp	.+6      	; 0x254 <waitForModuleResponseOk+0x14>
 24e:	1c 2f       	mov	r17, r28
 250:	cd 2f       	mov	r28, r29
		byte6 = byte7;
		byte7 = USARTReadChar();
	}
}

void waitForModuleResponseOk(void) {
 252:	d8 2f       	mov	r29, r24

	while(byte1 != 'O' || byte2 != 'K' || byte3 != 13 || byte4 != 10) {
		byte1 = byte2;
		byte2 = byte3;
		byte3 = byte4;
		byte4 = USARTReadChar();
 254:	c2 df       	rcall	.-124    	; 0x1da <USARTReadChar>
}

void waitForModuleResponseOk(void) {
	uint8_t byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0;

	while(byte1 != 'O' || byte2 != 'K' || byte3 != 13 || byte4 != 10) {
 256:	1f 34       	cpi	r17, 0x4F	; 79
 258:	d1 f7       	brne	.-12     	; 0x24e <waitForModuleResponseOk+0xe>
 25a:	cb 34       	cpi	r28, 0x4B	; 75
 25c:	c1 f7       	brne	.-16     	; 0x24e <waitForModuleResponseOk+0xe>
 25e:	dd 30       	cpi	r29, 0x0D	; 13
 260:	b1 f7       	brne	.-20     	; 0x24e <waitForModuleResponseOk+0xe>
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	a1 f7       	brne	.-24     	; 0x24e <waitForModuleResponseOk+0xe>
		byte1 = byte2;
		byte2 = byte3;
		byte3 = byte4;
		byte4 = USARTReadChar();
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	08 95       	ret

0000026e <waitForModuleResponseDataInputMode>:

void waitForModuleResponseDataInputMode(void) {
 26e:	cf 93       	push	r28
	uint8_t byte1 = 0, byte2 = 0;
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	01 c0       	rjmp	.+2      	; 0x276 <waitForModuleResponseDataInputMode+0x8>
 274:	c8 2f       	mov	r28, r24

	while(byte1 != '>' || byte2 != ' ') {
		byte1 = byte2;
		byte2 = USARTReadChar();
 276:	b1 df       	rcall	.-158    	; 0x1da <USARTReadChar>
}

void waitForModuleResponseDataInputMode(void) {
	uint8_t byte1 = 0, byte2 = 0;

	while(byte1 != '>' || byte2 != ' ') {
 278:	ce 33       	cpi	r28, 0x3E	; 62
 27a:	e1 f7       	brne	.-8      	; 0x274 <waitForModuleResponseDataInputMode+0x6>
 27c:	80 32       	cpi	r24, 0x20	; 32
 27e:	d1 f7       	brne	.-12     	; 0x274 <waitForModuleResponseDataInputMode+0x6>
		byte1 = byte2;
		byte2 = USARTReadChar();
	}
}
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <USARTWriteChar>:
}

void USARTWriteChar(uint8_t data) {
	
	// Aguarda disponibilidade do transmissor
	while(!(UCSR0A & (1 << UDRE0)));
 284:	e0 ec       	ldi	r30, 0xC0	; 192
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	90 81       	ld	r25, Z
 28a:	95 ff       	sbrs	r25, 5
 28c:	fd cf       	rjmp	.-6      	; 0x288 <USARTWriteChar+0x4>
	
	// Escreve o dado no buffer de envio
	UDR0 = data;
 28e:	80 93 c6 00 	sts	0x00C6, r24
 292:	08 95       	ret

00000294 <__vector_18>:
uint8_t consumptionH, consumptionL;

uint8_t byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0, byte5 = 0, byte6 = 0, byte7 = 0, byte8 = 0, byte9 = 0, byte10 = 0;

ISR(USART_RX_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	byte1 = byte2;
 2b6:	80 91 84 01 	lds	r24, 0x0184
 2ba:	80 93 85 01 	sts	0x0185, r24
	byte2 = byte3;
 2be:	90 91 83 01 	lds	r25, 0x0183
 2c2:	90 93 84 01 	sts	0x0184, r25
	byte3 = byte4;
 2c6:	20 91 82 01 	lds	r18, 0x0182
 2ca:	20 93 83 01 	sts	0x0183, r18
	byte4 = byte5;
 2ce:	30 91 81 01 	lds	r19, 0x0181
 2d2:	30 93 82 01 	sts	0x0182, r19
	byte5 = byte6;
 2d6:	40 91 80 01 	lds	r20, 0x0180
 2da:	40 93 81 01 	sts	0x0181, r20
	byte6 = byte7;
 2de:	f0 91 7f 01 	lds	r31, 0x017F
 2e2:	f0 93 80 01 	sts	0x0180, r31
	byte7 = byte8;
 2e6:	e0 91 7e 01 	lds	r30, 0x017E
 2ea:	e0 93 7f 01 	sts	0x017F, r30
	byte8 = byte9;
 2ee:	70 91 7d 01 	lds	r23, 0x017D
 2f2:	70 93 7e 01 	sts	0x017E, r23
	byte9 = byte10;
 2f6:	60 91 7c 01 	lds	r22, 0x017C
 2fa:	60 93 7d 01 	sts	0x017D, r22
	byte10 = UDR0;
 2fe:	50 91 c6 00 	lds	r21, 0x00C6
 302:	50 93 7c 01 	sts	0x017C, r21

	if(byte1 == '+' && byte2 == 'I' && byte3 == 'P' && byte4 == 'D' && byte5 == ',' && byte6 == '0' && byte7 == ',' && byte8 == '1' && byte9 == ':') {
 306:	8b 32       	cpi	r24, 0x2B	; 43
 308:	b9 f4       	brne	.+46     	; 0x338 <__vector_18+0xa4>
 30a:	99 34       	cpi	r25, 0x49	; 73
 30c:	a9 f4       	brne	.+42     	; 0x338 <__vector_18+0xa4>
 30e:	20 35       	cpi	r18, 0x50	; 80
 310:	99 f4       	brne	.+38     	; 0x338 <__vector_18+0xa4>
 312:	34 34       	cpi	r19, 0x44	; 68
 314:	89 f4       	brne	.+34     	; 0x338 <__vector_18+0xa4>
 316:	4c 32       	cpi	r20, 0x2C	; 44
 318:	79 f4       	brne	.+30     	; 0x338 <__vector_18+0xa4>
 31a:	f0 33       	cpi	r31, 0x30	; 48
 31c:	69 f4       	brne	.+26     	; 0x338 <__vector_18+0xa4>
 31e:	ec 32       	cpi	r30, 0x2C	; 44
 320:	59 f4       	brne	.+22     	; 0x338 <__vector_18+0xa4>
 322:	71 33       	cpi	r23, 0x31	; 49
 324:	49 f4       	brne	.+18     	; 0x338 <__vector_18+0xa4>
 326:	6a 33       	cpi	r22, 0x3A	; 58
 328:	39 f4       	brne	.+14     	; 0x338 <__vector_18+0xa4>
		if(byte10 == 1) SET(B, 1);
 32a:	51 30       	cpi	r21, 0x01	; 1
 32c:	11 f4       	brne	.+4      	; 0x332 <__vector_18+0x9e>
 32e:	29 9a       	sbi	0x05, 1	; 5
 330:	03 c0       	rjmp	.+6      	; 0x338 <__vector_18+0xa4>
		else if(byte10 == 0) CLR(B, 1);
 332:	51 11       	cpse	r21, r1
 334:	01 c0       	rjmp	.+2      	; 0x338 <__vector_18+0xa4>
 336:	29 98       	cbi	0x05, 1	; 5
	}
	
	if(byte10 == '>') {
 338:	80 91 7c 01 	lds	r24, 0x017C
 33c:	8e 33       	cpi	r24, 0x3E	; 62
 33e:	31 f4       	brne	.+12     	; 0x34c <__vector_18+0xb8>
		USARTWriteChar(consumptionH);
 340:	80 91 89 01 	lds	r24, 0x0189
 344:	9f df       	rcall	.-194    	; 0x284 <USARTWriteChar>
		USARTWriteChar(consumptionL);
 346:	80 91 88 01 	lds	r24, 0x0188
 34a:	9c df       	rcall	.-200    	; 0x284 <USARTWriteChar>
	}
}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <sendAtCommand>:
		byte1 = byte2;
		byte2 = USARTReadChar();
	}
}

void sendAtCommand(uint8_t* command, uint8_t commandLength, ExpectedResponse expectedResponse) {
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	06 2f       	mov	r16, r22
 37a:	f4 2e       	mov	r15, r20
	uint8_t i;
	
	for(i = 0; i < commandLength; i++) USARTWriteChar(command[i]);
 37c:	66 23       	and	r22, r22
 37e:	41 f0       	breq	.+16     	; 0x390 <sendAtCommand+0x22>
 380:	c8 2f       	mov	r28, r24
 382:	d9 2f       	mov	r29, r25
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	89 91       	ld	r24, Y+
 388:	7d df       	rcall	.-262    	; 0x284 <USARTWriteChar>
 38a:	1f 5f       	subi	r17, 0xFF	; 255
 38c:	10 13       	cpse	r17, r16
 38e:	fb cf       	rjmp	.-10     	; 0x386 <sendAtCommand+0x18>
	
	if(expectedResponse == RESPONSE_OK) waitForModuleResponseOk();
 390:	f1 10       	cpse	r15, r1
 392:	02 c0       	rjmp	.+4      	; 0x398 <sendAtCommand+0x2a>
 394:	55 df       	rcall	.-342    	; 0x240 <waitForModuleResponseOk>
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <sendAtCommand+0x32>
	else if(expectedResponse == RESPONSE_DATA_INPUT_MODE) waitForModuleResponseDataInputMode();
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	f8 12       	cpse	r15, r24
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <sendAtCommand+0x32>
 39e:	67 df       	rcall	.-306    	; 0x26e <waitForModuleResponseDataInputMode>
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	08 95       	ret

000003ac <ESP12Init>:

void ESP12Init(void) {
	waitForModuleResponseReady();
 3ac:	1e df       	rcall	.-452    	; 0x1ea <waitForModuleResponseReady>
	sendAtCommand(ATCWQAP, ATCWQAPLength, RESPONSE_OK);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	60 91 6f 01 	lds	r22, 0x016F
 3b4:	80 e7       	ldi	r24, 0x70	; 112
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	da df       	rcall	.-76     	; 0x36e <sendAtCommand>
	sendAtCommand(ATCWMODE, ATCWMODELength, RESPONSE_OK);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	60 91 27 01 	lds	r22, 0x0127
 3c0:	88 e2       	ldi	r24, 0x28	; 40
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	d4 df       	rcall	.-88     	; 0x36e <sendAtCommand>
	sendAtCommand(ATCWSAP, ATCWSAPLength, RESPONSE_OK);
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	60 91 36 01 	lds	r22, 0x0136
 3cc:	87 e3       	ldi	r24, 0x37	; 55
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	ce df       	rcall	.-100    	; 0x36e <sendAtCommand>
	sendAtCommand(ATCIPMUX, ATCIPMUXLength, RESPONSE_OK);
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	60 91 00 01 	lds	r22, 0x0100
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	c8 df       	rcall	.-112    	; 0x36e <sendAtCommand>
	sendAtCommand(ATCIPSERVER, ATCIPSERVERLength, RESPONSE_OK);	
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	60 91 0f 01 	lds	r22, 0x010F
 3e4:	80 e1       	ldi	r24, 0x10	; 16
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	c2 df       	rcall	.-124    	; 0x36e <sendAtCommand>
 3ea:	08 95       	ret

000003ec <sendDataToServer>:
	//sendAtCommand(ATCWJAP, ATCWJAPLength, RESPONSE_OK);
	//sendAtCommand(ATCIPSTART, ATCIPSTARTLength, RESPONSE_OK);
}

void sendDataToServer(void) {
	sendAtCommand(ATCIPSEND, ATCIPSENDLength, RESPONSE_NONE);
 3ec:	42 e0       	ldi	r20, 0x02	; 2
 3ee:	60 91 5d 01 	lds	r22, 0x015D
 3f2:	8e e5       	ldi	r24, 0x5E	; 94
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	bb df       	rcall	.-138    	; 0x36e <sendAtCommand>
 3f8:	08 95       	ret

000003fa <main>:
	// Escreve o dado no buffer de envio
	UDR0 = data;
}

int main(void)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	2c 97       	sbiw	r28, 0x0c	; 12
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
	double calculatedConsumption[3];
	double consumptionAverage;
	uint8_t i;
	uint16_t consumption;
	
	OUT(B, 0);
 40e:	20 9a       	sbi	0x04, 0	; 4
	OUT(B, 1);
 410:	21 9a       	sbi	0x04, 1	; 4
	
	adcInterruptCounter = 0;
 412:	10 92 86 01 	sts	0x0186, r1
	instantADCVoltageIndex = 0;
 416:	10 92 87 01 	sts	0x0187, r1
	
	USARTInit(0x0005);		
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	ce de       	rcall	.-612    	; 0x1bc <USARTInit>
	SET(B, 0);
 420:	28 9a       	sbi	0x05, 0	; 5
	
	ADCInit();
 422:	5d de       	rcall	.-838    	; 0xde <ADCInit>
	ESP12Init();
 424:	c3 df       	rcall	.-122    	; 0x3ac <ESP12Init>
	sei();
 426:	78 94       	sei
	
	ADCStartConversion();
 428:	6f de       	rcall	.-802    	; 0x108 <ADCStartConversion>
	for(;;)
	{
		calculatedConsumption[0] = calculatedConsumption[1];
 42a:	4d 80       	ldd	r4, Y+5	; 0x05
 42c:	5e 80       	ldd	r5, Y+6	; 0x06
 42e:	6f 80       	ldd	r6, Y+7	; 0x07
 430:	78 84       	ldd	r7, Y+8	; 0x08
		calculatedConsumption[1] = calculatedConsumption[2];
 432:	89 84       	ldd	r8, Y+9	; 0x09
 434:	9a 84       	ldd	r9, Y+10	; 0x0a
 436:	ab 84       	ldd	r10, Y+11	; 0x0b
 438:	bc 84       	ldd	r11, Y+12	; 0x0c
 43a:	8d 82       	std	Y+5, r8	; 0x05
 43c:	9e 82       	std	Y+6, r9	; 0x06
 43e:	af 82       	std	Y+7, r10	; 0x07
 440:	b8 86       	std	Y+8, r11	; 0x08
		calculatedConsumption[2] = calculateConsumption();
 442:	14 de       	rcall	.-984    	; 0x6c <calculateConsumption>
 444:	6b 01       	movw	r12, r22
 446:	7c 01       	movw	r14, r24
 448:	69 87       	std	Y+9, r22	; 0x09
 44a:	7a 87       	std	Y+10, r23	; 0x0a
 44c:	8b 87       	std	Y+11, r24	; 0x0b
 44e:	9c 87       	std	Y+12, r25	; 0x0c
		
		consumptionAverage = 0.0f;
		for(i = 0; i < 3; i++){
			consumptionAverage += calculatedConsumption[i];
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	a9 01       	movw	r20, r18
 456:	c3 01       	movw	r24, r6
 458:	b2 01       	movw	r22, r4
 45a:	15 d0       	rcall	.+42     	; 0x486 <__addsf3>
 45c:	a5 01       	movw	r20, r10
 45e:	94 01       	movw	r18, r8
 460:	12 d0       	rcall	.+36     	; 0x486 <__addsf3>
 462:	9b 01       	movw	r18, r22
 464:	ac 01       	movw	r20, r24
 466:	c7 01       	movw	r24, r14
 468:	b6 01       	movw	r22, r12
 46a:	0d d0       	rcall	.+26     	; 0x486 <__addsf3>
		}
		
		consumption = (uint16_t)(consumptionAverage / 3);
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 e4       	ldi	r20, 0x40	; 64
 472:	50 e4       	ldi	r21, 0x40	; 64
 474:	6c d0       	rcall	.+216    	; 0x54e <__divsf3>
 476:	d3 d0       	rcall	.+422    	; 0x61e <__fixunssfsi>
		
		consumptionH = consumption >> 8;
 478:	70 93 89 01 	sts	0x0189, r23
		consumptionL = consumption;
 47c:	60 93 88 01 	sts	0x0188, r22
		
		sendDataToServer();
 480:	b5 df       	rcall	.-150    	; 0x3ec <sendDataToServer>
	}
 482:	d3 cf       	rjmp	.-90     	; 0x42a <main+0x30>

00000484 <__subsf3>:
 484:	50 58       	subi	r21, 0x80	; 128

00000486 <__addsf3>:
 486:	bb 27       	eor	r27, r27
 488:	aa 27       	eor	r26, r26
 48a:	0e d0       	rcall	.+28     	; 0x4a8 <__addsf3x>
 48c:	48 c1       	rjmp	.+656    	; 0x71e <__fp_round>
 48e:	39 d1       	rcall	.+626    	; 0x702 <__fp_pscA>
 490:	30 f0       	brcs	.+12     	; 0x49e <__addsf3+0x18>
 492:	3e d1       	rcall	.+636    	; 0x710 <__fp_pscB>
 494:	20 f0       	brcs	.+8      	; 0x49e <__addsf3+0x18>
 496:	31 f4       	brne	.+12     	; 0x4a4 <__addsf3+0x1e>
 498:	9f 3f       	cpi	r25, 0xFF	; 255
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__addsf3+0x1a>
 49c:	1e f4       	brtc	.+6      	; 0x4a4 <__addsf3+0x1e>
 49e:	2e c1       	rjmp	.+604    	; 0x6fc <__fp_nan>
 4a0:	0e f4       	brtc	.+2      	; 0x4a4 <__addsf3+0x1e>
 4a2:	e0 95       	com	r30
 4a4:	e7 fb       	bst	r30, 7
 4a6:	24 c1       	rjmp	.+584    	; 0x6f0 <__fp_inf>

000004a8 <__addsf3x>:
 4a8:	e9 2f       	mov	r30, r25
 4aa:	4a d1       	rcall	.+660    	; 0x740 <__fp_split3>
 4ac:	80 f3       	brcs	.-32     	; 0x48e <__addsf3+0x8>
 4ae:	ba 17       	cp	r27, r26
 4b0:	62 07       	cpc	r22, r18
 4b2:	73 07       	cpc	r23, r19
 4b4:	84 07       	cpc	r24, r20
 4b6:	95 07       	cpc	r25, r21
 4b8:	18 f0       	brcs	.+6      	; 0x4c0 <__addsf3x+0x18>
 4ba:	71 f4       	brne	.+28     	; 0x4d8 <__addsf3x+0x30>
 4bc:	9e f5       	brtc	.+102    	; 0x524 <__stack+0x25>
 4be:	62 c1       	rjmp	.+708    	; 0x784 <__fp_zero>
 4c0:	0e f4       	brtc	.+2      	; 0x4c4 <__addsf3x+0x1c>
 4c2:	e0 95       	com	r30
 4c4:	0b 2e       	mov	r0, r27
 4c6:	ba 2f       	mov	r27, r26
 4c8:	a0 2d       	mov	r26, r0
 4ca:	0b 01       	movw	r0, r22
 4cc:	b9 01       	movw	r22, r18
 4ce:	90 01       	movw	r18, r0
 4d0:	0c 01       	movw	r0, r24
 4d2:	ca 01       	movw	r24, r20
 4d4:	a0 01       	movw	r20, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	ff 27       	eor	r31, r31
 4da:	59 1b       	sub	r21, r25
 4dc:	99 f0       	breq	.+38     	; 0x504 <__stack+0x5>
 4de:	59 3f       	cpi	r21, 0xF9	; 249
 4e0:	50 f4       	brcc	.+20     	; 0x4f6 <__addsf3x+0x4e>
 4e2:	50 3e       	cpi	r21, 0xE0	; 224
 4e4:	68 f1       	brcs	.+90     	; 0x540 <__stack+0x41>
 4e6:	1a 16       	cp	r1, r26
 4e8:	f0 40       	sbci	r31, 0x00	; 0
 4ea:	a2 2f       	mov	r26, r18
 4ec:	23 2f       	mov	r18, r19
 4ee:	34 2f       	mov	r19, r20
 4f0:	44 27       	eor	r20, r20
 4f2:	58 5f       	subi	r21, 0xF8	; 248
 4f4:	f3 cf       	rjmp	.-26     	; 0x4dc <__addsf3x+0x34>
 4f6:	46 95       	lsr	r20
 4f8:	37 95       	ror	r19
 4fa:	27 95       	ror	r18
 4fc:	a7 95       	ror	r26
 4fe:	f0 40       	sbci	r31, 0x00	; 0
 500:	53 95       	inc	r21
 502:	c9 f7       	brne	.-14     	; 0x4f6 <__addsf3x+0x4e>
 504:	7e f4       	brtc	.+30     	; 0x524 <__stack+0x25>
 506:	1f 16       	cp	r1, r31
 508:	ba 0b       	sbc	r27, r26
 50a:	62 0b       	sbc	r22, r18
 50c:	73 0b       	sbc	r23, r19
 50e:	84 0b       	sbc	r24, r20
 510:	ba f0       	brmi	.+46     	; 0x540 <__stack+0x41>
 512:	91 50       	subi	r25, 0x01	; 1
 514:	a1 f0       	breq	.+40     	; 0x53e <__stack+0x3f>
 516:	ff 0f       	add	r31, r31
 518:	bb 1f       	adc	r27, r27
 51a:	66 1f       	adc	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	c2 f7       	brpl	.-16     	; 0x512 <__stack+0x13>
 522:	0e c0       	rjmp	.+28     	; 0x540 <__stack+0x41>
 524:	ba 0f       	add	r27, r26
 526:	62 1f       	adc	r22, r18
 528:	73 1f       	adc	r23, r19
 52a:	84 1f       	adc	r24, r20
 52c:	48 f4       	brcc	.+18     	; 0x540 <__stack+0x41>
 52e:	87 95       	ror	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b7 95       	ror	r27
 536:	f7 95       	ror	r31
 538:	9e 3f       	cpi	r25, 0xFE	; 254
 53a:	08 f0       	brcs	.+2      	; 0x53e <__stack+0x3f>
 53c:	b3 cf       	rjmp	.-154    	; 0x4a4 <__addsf3+0x1e>
 53e:	93 95       	inc	r25
 540:	88 0f       	add	r24, r24
 542:	08 f0       	brcs	.+2      	; 0x546 <__stack+0x47>
 544:	99 27       	eor	r25, r25
 546:	ee 0f       	add	r30, r30
 548:	97 95       	ror	r25
 54a:	87 95       	ror	r24
 54c:	08 95       	ret

0000054e <__divsf3>:
 54e:	0c d0       	rcall	.+24     	; 0x568 <__divsf3x>
 550:	e6 c0       	rjmp	.+460    	; 0x71e <__fp_round>
 552:	de d0       	rcall	.+444    	; 0x710 <__fp_pscB>
 554:	40 f0       	brcs	.+16     	; 0x566 <__divsf3+0x18>
 556:	d5 d0       	rcall	.+426    	; 0x702 <__fp_pscA>
 558:	30 f0       	brcs	.+12     	; 0x566 <__divsf3+0x18>
 55a:	21 f4       	brne	.+8      	; 0x564 <__divsf3+0x16>
 55c:	5f 3f       	cpi	r21, 0xFF	; 255
 55e:	19 f0       	breq	.+6      	; 0x566 <__divsf3+0x18>
 560:	c7 c0       	rjmp	.+398    	; 0x6f0 <__fp_inf>
 562:	51 11       	cpse	r21, r1
 564:	10 c1       	rjmp	.+544    	; 0x786 <__fp_szero>
 566:	ca c0       	rjmp	.+404    	; 0x6fc <__fp_nan>

00000568 <__divsf3x>:
 568:	eb d0       	rcall	.+470    	; 0x740 <__fp_split3>
 56a:	98 f3       	brcs	.-26     	; 0x552 <__divsf3+0x4>

0000056c <__divsf3_pse>:
 56c:	99 23       	and	r25, r25
 56e:	c9 f3       	breq	.-14     	; 0x562 <__divsf3+0x14>
 570:	55 23       	and	r21, r21
 572:	b1 f3       	breq	.-20     	; 0x560 <__divsf3+0x12>
 574:	95 1b       	sub	r25, r21
 576:	55 0b       	sbc	r21, r21
 578:	bb 27       	eor	r27, r27
 57a:	aa 27       	eor	r26, r26
 57c:	62 17       	cp	r22, r18
 57e:	73 07       	cpc	r23, r19
 580:	84 07       	cpc	r24, r20
 582:	38 f0       	brcs	.+14     	; 0x592 <__divsf3_pse+0x26>
 584:	9f 5f       	subi	r25, 0xFF	; 255
 586:	5f 4f       	sbci	r21, 0xFF	; 255
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	44 1f       	adc	r20, r20
 58e:	aa 1f       	adc	r26, r26
 590:	a9 f3       	breq	.-22     	; 0x57c <__divsf3_pse+0x10>
 592:	33 d0       	rcall	.+102    	; 0x5fa <__divsf3_pse+0x8e>
 594:	0e 2e       	mov	r0, r30
 596:	3a f0       	brmi	.+14     	; 0x5a6 <__divsf3_pse+0x3a>
 598:	e0 e8       	ldi	r30, 0x80	; 128
 59a:	30 d0       	rcall	.+96     	; 0x5fc <__divsf3_pse+0x90>
 59c:	91 50       	subi	r25, 0x01	; 1
 59e:	50 40       	sbci	r21, 0x00	; 0
 5a0:	e6 95       	lsr	r30
 5a2:	00 1c       	adc	r0, r0
 5a4:	ca f7       	brpl	.-14     	; 0x598 <__divsf3_pse+0x2c>
 5a6:	29 d0       	rcall	.+82     	; 0x5fa <__divsf3_pse+0x8e>
 5a8:	fe 2f       	mov	r31, r30
 5aa:	27 d0       	rcall	.+78     	; 0x5fa <__divsf3_pse+0x8e>
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	bb 1f       	adc	r27, r27
 5b4:	26 17       	cp	r18, r22
 5b6:	37 07       	cpc	r19, r23
 5b8:	48 07       	cpc	r20, r24
 5ba:	ab 07       	cpc	r26, r27
 5bc:	b0 e8       	ldi	r27, 0x80	; 128
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__divsf3_pse+0x56>
 5c0:	bb 0b       	sbc	r27, r27
 5c2:	80 2d       	mov	r24, r0
 5c4:	bf 01       	movw	r22, r30
 5c6:	ff 27       	eor	r31, r31
 5c8:	93 58       	subi	r25, 0x83	; 131
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	2a f0       	brmi	.+10     	; 0x5d8 <__divsf3_pse+0x6c>
 5ce:	9e 3f       	cpi	r25, 0xFE	; 254
 5d0:	51 05       	cpc	r21, r1
 5d2:	68 f0       	brcs	.+26     	; 0x5ee <__divsf3_pse+0x82>
 5d4:	8d c0       	rjmp	.+282    	; 0x6f0 <__fp_inf>
 5d6:	d7 c0       	rjmp	.+430    	; 0x786 <__fp_szero>
 5d8:	5f 3f       	cpi	r21, 0xFF	; 255
 5da:	ec f3       	brlt	.-6      	; 0x5d6 <__divsf3_pse+0x6a>
 5dc:	98 3e       	cpi	r25, 0xE8	; 232
 5de:	dc f3       	brlt	.-10     	; 0x5d6 <__divsf3_pse+0x6a>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f7 95       	ror	r31
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	c9 f7       	brne	.-14     	; 0x5e0 <__divsf3_pse+0x74>
 5ee:	88 0f       	add	r24, r24
 5f0:	91 1d       	adc	r25, r1
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret
 5fa:	e1 e0       	ldi	r30, 0x01	; 1
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	bb 1f       	adc	r27, r27
 604:	62 17       	cp	r22, r18
 606:	73 07       	cpc	r23, r19
 608:	84 07       	cpc	r24, r20
 60a:	ba 07       	cpc	r27, r26
 60c:	20 f0       	brcs	.+8      	; 0x616 <__divsf3_pse+0xaa>
 60e:	62 1b       	sub	r22, r18
 610:	73 0b       	sbc	r23, r19
 612:	84 0b       	sbc	r24, r20
 614:	ba 0b       	sbc	r27, r26
 616:	ee 1f       	adc	r30, r30
 618:	88 f7       	brcc	.-30     	; 0x5fc <__divsf3_pse+0x90>
 61a:	e0 95       	com	r30
 61c:	08 95       	ret

0000061e <__fixunssfsi>:
 61e:	98 d0       	rcall	.+304    	; 0x750 <__fp_splitA>
 620:	88 f0       	brcs	.+34     	; 0x644 <__fixunssfsi+0x26>
 622:	9f 57       	subi	r25, 0x7F	; 127
 624:	90 f0       	brcs	.+36     	; 0x64a <__fixunssfsi+0x2c>
 626:	b9 2f       	mov	r27, r25
 628:	99 27       	eor	r25, r25
 62a:	b7 51       	subi	r27, 0x17	; 23
 62c:	a0 f0       	brcs	.+40     	; 0x656 <__fixunssfsi+0x38>
 62e:	d1 f0       	breq	.+52     	; 0x664 <__fixunssfsi+0x46>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	1a f0       	brmi	.+6      	; 0x640 <__fixunssfsi+0x22>
 63a:	ba 95       	dec	r27
 63c:	c9 f7       	brne	.-14     	; 0x630 <__fixunssfsi+0x12>
 63e:	12 c0       	rjmp	.+36     	; 0x664 <__fixunssfsi+0x46>
 640:	b1 30       	cpi	r27, 0x01	; 1
 642:	81 f0       	breq	.+32     	; 0x664 <__fixunssfsi+0x46>
 644:	9f d0       	rcall	.+318    	; 0x784 <__fp_zero>
 646:	b1 e0       	ldi	r27, 0x01	; 1
 648:	08 95       	ret
 64a:	9c c0       	rjmp	.+312    	; 0x784 <__fp_zero>
 64c:	67 2f       	mov	r22, r23
 64e:	78 2f       	mov	r23, r24
 650:	88 27       	eor	r24, r24
 652:	b8 5f       	subi	r27, 0xF8	; 248
 654:	39 f0       	breq	.+14     	; 0x664 <__fixunssfsi+0x46>
 656:	b9 3f       	cpi	r27, 0xF9	; 249
 658:	cc f3       	brlt	.-14     	; 0x64c <__fixunssfsi+0x2e>
 65a:	86 95       	lsr	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b3 95       	inc	r27
 662:	d9 f7       	brne	.-10     	; 0x65a <__fixunssfsi+0x3c>
 664:	3e f4       	brtc	.+14     	; 0x674 <__fixunssfsi+0x56>
 666:	90 95       	com	r25
 668:	80 95       	com	r24
 66a:	70 95       	com	r23
 66c:	61 95       	neg	r22
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	08 95       	ret

00000676 <__floatunsisf>:
 676:	e8 94       	clt
 678:	09 c0       	rjmp	.+18     	; 0x68c <__floatsisf+0x12>

0000067a <__floatsisf>:
 67a:	97 fb       	bst	r25, 7
 67c:	3e f4       	brtc	.+14     	; 0x68c <__floatsisf+0x12>
 67e:	90 95       	com	r25
 680:	80 95       	com	r24
 682:	70 95       	com	r23
 684:	61 95       	neg	r22
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	99 23       	and	r25, r25
 68e:	a9 f0       	breq	.+42     	; 0x6ba <__floatsisf+0x40>
 690:	f9 2f       	mov	r31, r25
 692:	96 e9       	ldi	r25, 0x96	; 150
 694:	bb 27       	eor	r27, r27
 696:	93 95       	inc	r25
 698:	f6 95       	lsr	r31
 69a:	87 95       	ror	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f1 11       	cpse	r31, r1
 6a4:	f8 cf       	rjmp	.-16     	; 0x696 <__floatsisf+0x1c>
 6a6:	fa f4       	brpl	.+62     	; 0x6e6 <__floatsisf+0x6c>
 6a8:	bb 0f       	add	r27, r27
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <__floatsisf+0x36>
 6ac:	60 ff       	sbrs	r22, 0
 6ae:	1b c0       	rjmp	.+54     	; 0x6e6 <__floatsisf+0x6c>
 6b0:	6f 5f       	subi	r22, 0xFF	; 255
 6b2:	7f 4f       	sbci	r23, 0xFF	; 255
 6b4:	8f 4f       	sbci	r24, 0xFF	; 255
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	16 c0       	rjmp	.+44     	; 0x6e6 <__floatsisf+0x6c>
 6ba:	88 23       	and	r24, r24
 6bc:	11 f0       	breq	.+4      	; 0x6c2 <__floatsisf+0x48>
 6be:	96 e9       	ldi	r25, 0x96	; 150
 6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <__floatsisf+0x6a>
 6c2:	77 23       	and	r23, r23
 6c4:	21 f0       	breq	.+8      	; 0x6ce <__floatsisf+0x54>
 6c6:	9e e8       	ldi	r25, 0x8E	; 142
 6c8:	87 2f       	mov	r24, r23
 6ca:	76 2f       	mov	r23, r22
 6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <__floatsisf+0x5e>
 6ce:	66 23       	and	r22, r22
 6d0:	71 f0       	breq	.+28     	; 0x6ee <__floatsisf+0x74>
 6d2:	96 e8       	ldi	r25, 0x86	; 134
 6d4:	86 2f       	mov	r24, r22
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	2a f0       	brmi	.+10     	; 0x6e6 <__floatsisf+0x6c>
 6dc:	9a 95       	dec	r25
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	da f7       	brpl	.-10     	; 0x6dc <__floatsisf+0x62>
 6e6:	88 0f       	add	r24, r24
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret

000006f0 <__fp_inf>:
 6f0:	97 f9       	bld	r25, 7
 6f2:	9f 67       	ori	r25, 0x7F	; 127
 6f4:	80 e8       	ldi	r24, 0x80	; 128
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	08 95       	ret

000006fc <__fp_nan>:
 6fc:	9f ef       	ldi	r25, 0xFF	; 255
 6fe:	80 ec       	ldi	r24, 0xC0	; 192
 700:	08 95       	ret

00000702 <__fp_pscA>:
 702:	00 24       	eor	r0, r0
 704:	0a 94       	dec	r0
 706:	16 16       	cp	r1, r22
 708:	17 06       	cpc	r1, r23
 70a:	18 06       	cpc	r1, r24
 70c:	09 06       	cpc	r0, r25
 70e:	08 95       	ret

00000710 <__fp_pscB>:
 710:	00 24       	eor	r0, r0
 712:	0a 94       	dec	r0
 714:	12 16       	cp	r1, r18
 716:	13 06       	cpc	r1, r19
 718:	14 06       	cpc	r1, r20
 71a:	05 06       	cpc	r0, r21
 71c:	08 95       	ret

0000071e <__fp_round>:
 71e:	09 2e       	mov	r0, r25
 720:	03 94       	inc	r0
 722:	00 0c       	add	r0, r0
 724:	11 f4       	brne	.+4      	; 0x72a <__fp_round+0xc>
 726:	88 23       	and	r24, r24
 728:	52 f0       	brmi	.+20     	; 0x73e <__fp_round+0x20>
 72a:	bb 0f       	add	r27, r27
 72c:	40 f4       	brcc	.+16     	; 0x73e <__fp_round+0x20>
 72e:	bf 2b       	or	r27, r31
 730:	11 f4       	brne	.+4      	; 0x736 <__fp_round+0x18>
 732:	60 ff       	sbrs	r22, 0
 734:	04 c0       	rjmp	.+8      	; 0x73e <__fp_round+0x20>
 736:	6f 5f       	subi	r22, 0xFF	; 255
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	08 95       	ret

00000740 <__fp_split3>:
 740:	57 fd       	sbrc	r21, 7
 742:	90 58       	subi	r25, 0x80	; 128
 744:	44 0f       	add	r20, r20
 746:	55 1f       	adc	r21, r21
 748:	59 f0       	breq	.+22     	; 0x760 <__fp_splitA+0x10>
 74a:	5f 3f       	cpi	r21, 0xFF	; 255
 74c:	71 f0       	breq	.+28     	; 0x76a <__fp_splitA+0x1a>
 74e:	47 95       	ror	r20

00000750 <__fp_splitA>:
 750:	88 0f       	add	r24, r24
 752:	97 fb       	bst	r25, 7
 754:	99 1f       	adc	r25, r25
 756:	61 f0       	breq	.+24     	; 0x770 <__fp_splitA+0x20>
 758:	9f 3f       	cpi	r25, 0xFF	; 255
 75a:	79 f0       	breq	.+30     	; 0x77a <__fp_splitA+0x2a>
 75c:	87 95       	ror	r24
 75e:	08 95       	ret
 760:	12 16       	cp	r1, r18
 762:	13 06       	cpc	r1, r19
 764:	14 06       	cpc	r1, r20
 766:	55 1f       	adc	r21, r21
 768:	f2 cf       	rjmp	.-28     	; 0x74e <__fp_split3+0xe>
 76a:	46 95       	lsr	r20
 76c:	f1 df       	rcall	.-30     	; 0x750 <__fp_splitA>
 76e:	08 c0       	rjmp	.+16     	; 0x780 <__fp_splitA+0x30>
 770:	16 16       	cp	r1, r22
 772:	17 06       	cpc	r1, r23
 774:	18 06       	cpc	r1, r24
 776:	99 1f       	adc	r25, r25
 778:	f1 cf       	rjmp	.-30     	; 0x75c <__fp_splitA+0xc>
 77a:	86 95       	lsr	r24
 77c:	71 05       	cpc	r23, r1
 77e:	61 05       	cpc	r22, r1
 780:	08 94       	sec
 782:	08 95       	ret

00000784 <__fp_zero>:
 784:	e8 94       	clt

00000786 <__fp_szero>:
 786:	bb 27       	eor	r27, r27
 788:	66 27       	eor	r22, r22
 78a:	77 27       	eor	r23, r23
 78c:	cb 01       	movw	r24, r22
 78e:	97 f9       	bld	r25, 7
 790:	08 95       	ret

00000792 <__mulsf3>:
 792:	0b d0       	rcall	.+22     	; 0x7aa <__mulsf3x>
 794:	c4 cf       	rjmp	.-120    	; 0x71e <__fp_round>
 796:	b5 df       	rcall	.-150    	; 0x702 <__fp_pscA>
 798:	28 f0       	brcs	.+10     	; 0x7a4 <__mulsf3+0x12>
 79a:	ba df       	rcall	.-140    	; 0x710 <__fp_pscB>
 79c:	18 f0       	brcs	.+6      	; 0x7a4 <__mulsf3+0x12>
 79e:	95 23       	and	r25, r21
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <__mulsf3+0x12>
 7a2:	a6 cf       	rjmp	.-180    	; 0x6f0 <__fp_inf>
 7a4:	ab cf       	rjmp	.-170    	; 0x6fc <__fp_nan>
 7a6:	11 24       	eor	r1, r1
 7a8:	ee cf       	rjmp	.-36     	; 0x786 <__fp_szero>

000007aa <__mulsf3x>:
 7aa:	ca df       	rcall	.-108    	; 0x740 <__fp_split3>
 7ac:	a0 f3       	brcs	.-24     	; 0x796 <__mulsf3+0x4>

000007ae <__mulsf3_pse>:
 7ae:	95 9f       	mul	r25, r21
 7b0:	d1 f3       	breq	.-12     	; 0x7a6 <__mulsf3+0x14>
 7b2:	95 0f       	add	r25, r21
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	55 1f       	adc	r21, r21
 7b8:	62 9f       	mul	r22, r18
 7ba:	f0 01       	movw	r30, r0
 7bc:	72 9f       	mul	r23, r18
 7be:	bb 27       	eor	r27, r27
 7c0:	f0 0d       	add	r31, r0
 7c2:	b1 1d       	adc	r27, r1
 7c4:	63 9f       	mul	r22, r19
 7c6:	aa 27       	eor	r26, r26
 7c8:	f0 0d       	add	r31, r0
 7ca:	b1 1d       	adc	r27, r1
 7cc:	aa 1f       	adc	r26, r26
 7ce:	64 9f       	mul	r22, r20
 7d0:	66 27       	eor	r22, r22
 7d2:	b0 0d       	add	r27, r0
 7d4:	a1 1d       	adc	r26, r1
 7d6:	66 1f       	adc	r22, r22
 7d8:	82 9f       	mul	r24, r18
 7da:	22 27       	eor	r18, r18
 7dc:	b0 0d       	add	r27, r0
 7de:	a1 1d       	adc	r26, r1
 7e0:	62 1f       	adc	r22, r18
 7e2:	73 9f       	mul	r23, r19
 7e4:	b0 0d       	add	r27, r0
 7e6:	a1 1d       	adc	r26, r1
 7e8:	62 1f       	adc	r22, r18
 7ea:	83 9f       	mul	r24, r19
 7ec:	a0 0d       	add	r26, r0
 7ee:	61 1d       	adc	r22, r1
 7f0:	22 1f       	adc	r18, r18
 7f2:	74 9f       	mul	r23, r20
 7f4:	33 27       	eor	r19, r19
 7f6:	a0 0d       	add	r26, r0
 7f8:	61 1d       	adc	r22, r1
 7fa:	23 1f       	adc	r18, r19
 7fc:	84 9f       	mul	r24, r20
 7fe:	60 0d       	add	r22, r0
 800:	21 1d       	adc	r18, r1
 802:	82 2f       	mov	r24, r18
 804:	76 2f       	mov	r23, r22
 806:	6a 2f       	mov	r22, r26
 808:	11 24       	eor	r1, r1
 80a:	9f 57       	subi	r25, 0x7F	; 127
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	8a f0       	brmi	.+34     	; 0x832 <__mulsf3_pse+0x84>
 810:	e1 f0       	breq	.+56     	; 0x84a <__mulsf3_pse+0x9c>
 812:	88 23       	and	r24, r24
 814:	4a f0       	brmi	.+18     	; 0x828 <__mulsf3_pse+0x7a>
 816:	ee 0f       	add	r30, r30
 818:	ff 1f       	adc	r31, r31
 81a:	bb 1f       	adc	r27, r27
 81c:	66 1f       	adc	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	91 50       	subi	r25, 0x01	; 1
 824:	50 40       	sbci	r21, 0x00	; 0
 826:	a9 f7       	brne	.-22     	; 0x812 <__mulsf3_pse+0x64>
 828:	9e 3f       	cpi	r25, 0xFE	; 254
 82a:	51 05       	cpc	r21, r1
 82c:	70 f0       	brcs	.+28     	; 0x84a <__mulsf3_pse+0x9c>
 82e:	60 cf       	rjmp	.-320    	; 0x6f0 <__fp_inf>
 830:	aa cf       	rjmp	.-172    	; 0x786 <__fp_szero>
 832:	5f 3f       	cpi	r21, 0xFF	; 255
 834:	ec f3       	brlt	.-6      	; 0x830 <__mulsf3_pse+0x82>
 836:	98 3e       	cpi	r25, 0xE8	; 232
 838:	dc f3       	brlt	.-10     	; 0x830 <__mulsf3_pse+0x82>
 83a:	86 95       	lsr	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f7 95       	ror	r31
 844:	e7 95       	ror	r30
 846:	9f 5f       	subi	r25, 0xFF	; 255
 848:	c1 f7       	brne	.-16     	; 0x83a <__mulsf3_pse+0x8c>
 84a:	fe 2b       	or	r31, r30
 84c:	88 0f       	add	r24, r24
 84e:	91 1d       	adc	r25, r1
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	97 f9       	bld	r25, 7
 856:	08 95       	ret
 858:	11 f4       	brne	.+4      	; 0x85e <__mulsf3_pse+0xb0>
 85a:	0e f4       	brtc	.+2      	; 0x85e <__mulsf3_pse+0xb0>
 85c:	4f cf       	rjmp	.-354    	; 0x6fc <__fp_nan>
 85e:	3e c0       	rjmp	.+124    	; 0x8dc <__fp_mpack>

00000860 <sqrt>:
 860:	77 df       	rcall	.-274    	; 0x750 <__fp_splitA>
 862:	d0 f3       	brcs	.-12     	; 0x858 <__mulsf3_pse+0xaa>
 864:	99 23       	and	r25, r25
 866:	d9 f3       	breq	.-10     	; 0x85e <__mulsf3_pse+0xb0>
 868:	ce f3       	brts	.-14     	; 0x85c <__mulsf3_pse+0xae>
 86a:	9f 57       	subi	r25, 0x7F	; 127
 86c:	55 0b       	sbc	r21, r21
 86e:	87 ff       	sbrs	r24, 7
 870:	43 d0       	rcall	.+134    	; 0x8f8 <__fp_norm2>
 872:	00 24       	eor	r0, r0
 874:	a0 e6       	ldi	r26, 0x60	; 96
 876:	40 ea       	ldi	r20, 0xA0	; 160
 878:	90 01       	movw	r18, r0
 87a:	80 58       	subi	r24, 0x80	; 128
 87c:	56 95       	lsr	r21
 87e:	97 95       	ror	r25
 880:	28 f4       	brcc	.+10     	; 0x88c <sqrt+0x2c>
 882:	80 5c       	subi	r24, 0xC0	; 192
 884:	66 0f       	add	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	20 f0       	brcs	.+8      	; 0x894 <sqrt+0x34>
 88c:	26 17       	cp	r18, r22
 88e:	37 07       	cpc	r19, r23
 890:	48 07       	cpc	r20, r24
 892:	30 f4       	brcc	.+12     	; 0x8a0 <sqrt+0x40>
 894:	62 1b       	sub	r22, r18
 896:	73 0b       	sbc	r23, r19
 898:	84 0b       	sbc	r24, r20
 89a:	20 29       	or	r18, r0
 89c:	31 29       	or	r19, r1
 89e:	4a 2b       	or	r20, r26
 8a0:	a6 95       	lsr	r26
 8a2:	17 94       	ror	r1
 8a4:	07 94       	ror	r0
 8a6:	20 25       	eor	r18, r0
 8a8:	31 25       	eor	r19, r1
 8aa:	4a 27       	eor	r20, r26
 8ac:	58 f7       	brcc	.-42     	; 0x884 <sqrt+0x24>
 8ae:	66 0f       	add	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	20 f0       	brcs	.+8      	; 0x8be <sqrt+0x5e>
 8b6:	26 17       	cp	r18, r22
 8b8:	37 07       	cpc	r19, r23
 8ba:	48 07       	cpc	r20, r24
 8bc:	30 f4       	brcc	.+12     	; 0x8ca <sqrt+0x6a>
 8be:	62 0b       	sbc	r22, r18
 8c0:	73 0b       	sbc	r23, r19
 8c2:	84 0b       	sbc	r24, r20
 8c4:	20 0d       	add	r18, r0
 8c6:	31 1d       	adc	r19, r1
 8c8:	41 1d       	adc	r20, r1
 8ca:	a0 95       	com	r26
 8cc:	81 f7       	brne	.-32     	; 0x8ae <sqrt+0x4e>
 8ce:	b9 01       	movw	r22, r18
 8d0:	84 2f       	mov	r24, r20
 8d2:	91 58       	subi	r25, 0x81	; 129
 8d4:	88 0f       	add	r24, r24
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	08 95       	ret

000008dc <__fp_mpack>:
 8dc:	9f 3f       	cpi	r25, 0xFF	; 255
 8de:	31 f0       	breq	.+12     	; 0x8ec <__fp_mpack_finite+0xc>

000008e0 <__fp_mpack_finite>:
 8e0:	91 50       	subi	r25, 0x01	; 1
 8e2:	20 f4       	brcc	.+8      	; 0x8ec <__fp_mpack_finite+0xc>
 8e4:	87 95       	ror	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	b7 95       	ror	r27
 8ec:	88 0f       	add	r24, r24
 8ee:	91 1d       	adc	r25, r1
 8f0:	96 95       	lsr	r25
 8f2:	87 95       	ror	r24
 8f4:	97 f9       	bld	r25, 7
 8f6:	08 95       	ret

000008f8 <__fp_norm2>:
 8f8:	91 50       	subi	r25, 0x01	; 1
 8fa:	50 40       	sbci	r21, 0x00	; 0
 8fc:	66 0f       	add	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	88 1f       	adc	r24, r24
 902:	d2 f7       	brpl	.-12     	; 0x8f8 <__fp_norm2>
 904:	08 95       	ret

00000906 <_exit>:
 906:	f8 94       	cli

00000908 <__stop_program>:
 908:	ff cf       	rjmp	.-2      	; 0x908 <__stop_program>
